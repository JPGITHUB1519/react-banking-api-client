{"version":3,"sources":["components/alert/Alert.js","components/button/ButtonPrimary.js","api/APIUtils.js","components/ObjectDetail.js","Utils.js","components/TransactionForm.js","components/button/ButtonBackground.js","components/SearchForm.js","components/modal/Modal.js","components/loader/Loader.js","components/crud/DatatableRow.js","components/crud/Datatable.js","components/button/ButtonContainer.js","components/crud/CURecordModal.js","components/card/Card.js","components/RecordCard.js","components/crud/ViewRecordModal.js","components/loader/FullScreenLoader.js","components/NotResultsFound.js","components/pagination/Pagination.js","components/crud/Crud.js","api/CustomerApi.js","api/AccountApi.js","components/RecordDetails.js","components/App.js","reportWebVitals.js","index.js"],"names":["Alert","props","handleClick","bind","this","onCloseClick","undefined","show","className","type","children","html","dangerouslySetInnerHTML","__html","onClick","React","Component","defaultProps","ButtonPrimary","spacing","title","API_URL","transferMoney","amount","transferorId","transfereeId","a","fetch","method","body","JSON","stringify","transferorAccountId","transfereeAccountId","response","json","console","log","ObjectDetail","value","getObjectDetailsJSX","object","Object","keys","map","key","index","pascalCase","string","startCase","camelCase","replace","generateCheckboxObject","data","keyPrefix","defaultValues","checkboxObject","forEach","record","id","convertToCase","convertedString","stringCase","snakeCase","kebabCase","TransactionForm","state","showAlert","formAlert","content","initialInput","createRef","handleInputChange","handleAlertCloseClick","focusInitialInput","e","target","setState","name","preventDefault","formValidationErrors","validateForm","length","transactionResult","transactionStatus","alertContent","Utils","clearForm","showErrorAlert","message","APIUtils","errors","isNaN","Number","current","focus","errorsObject","ref","onChange","ButtonBackground","SearchForm","handleSearchClick","onSearchClick","onInputChange","Fragment","typeOfButton","Modal","header","footer","Loader","loader","customOptions","styles","base","border","width","height","style","color","propTypes","Proptypes","bool","shape","number","DatatableRow","data-id","bulkDeleting","checkboxes","checked","onCheckboxValueChange","columns","column","rowData","actionButtons","onEditActionButtonClick","onDeleteActionButtonClick","onViewActionButtonClick","Datatable","firstRecord","rows","theme","row","ButtonContainer","CUFormModal","form","handleSaveClick","handleChange","handleCloseModalClick","action","formFields","fieldName","prevProps","prevState","snapshot","selectedRecord","fillFormStateFromRecord","newObject","create","update","previousState","error","resetDatatable","closeAlert","inputs","isRequired","timeout","setTimeout","modalHeader","entityName","field","disableField","disabled","pagination","Card","RecordCard","objectDetailsJSX","ViewRecordModal","FullScreenLoader","NotResultsFound","Pagination","handlePreviousClick","handleNextClick","handlePageNumberClick","onPreviousClick","pageClicked","parseInt","parentNode","dataset","page","onPageNumberClick","onNextClick","element","liElements","i","totalPages","data-page","activePage","href","push","isPreviousEnabled","isNextEnabled","Crud","searchText","isDataLoaded","showCreateRecordModal","showUpdateRecordModal","showViewRecordModal","showFullScreenLoader","handleSearchValueChange","handleCheckboxValueChange","handleAddRecordModalClick","handleEditActionButtonClick","handleViewActionButtonClick","handleDeleteActionButtonClick","handleBulkDeletingButton","handlePaginationPreviousClick","handlePaginationNumberClick","handlePaginationNextClick","fillDatatable","setPageOnPagination","stateObject","read","perPage","total_pages","search","checkboxesObject","searchValue","checkboxesCopy","getSelectedRecordId","findById","hideFullScreenLoader","window","confirm","delete","deleteStatusCode","alert","checkedIds","getCheckedRecordsIds","join","bulkDelete","modalName","previousPage","nextPage","filter","closest","fieldStringCase","fields","url","remove","status","ids","promises","Promise","all","responses","balance","customerId","RecordDetails","loading","isLoaded","showRecordDetails","App","AccountApi","CustomerApi","customer_id","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.aad17189.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\n\r\n// Alert can render in two ways: receive HTML as prop or react elements as children\r\nclass Alert extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.handleClick = this.handleClick.bind(this);\r\n  }\r\n\r\n  handleClick() {\r\n    this.props.onCloseClick();\r\n  }\r\n\r\n  render() {\r\n    if (this.props.show !== undefined && this.props.show === false) {\r\n      return null;\r\n    }\r\n    \r\n    return (   \r\n      <div className={`alert alert--${this.props.type}`}>\r\n          {this.props.children}\r\n          {this.props.html &&  <span dangerouslySetInnerHTML={{__html: this.props.html}} /> }\r\n          <button className=\"alert__close\" onClick={this.handleClick}>\r\n          <span>&times;</span>\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nAlert.propTypes = {\r\n  children: PropTypes.node,\r\n  onCloseClick: PropTypes.func,\r\n  show: PropTypes.bool,\r\n  type: PropTypes.string,\r\n  html: PropTypes.string\r\n}\r\n\r\nAlert.defaultProps = {\r\n  type: 'primary'\r\n}\r\n\r\nexport default Alert;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction ButtonPrimary(props) {\r\n  return (\r\n    <button className={`button button--red button--size-medium button--spacing-${props.spacing}`} onClick={props.onClick}>\r\n      {props.title}\r\n    </button>\r\n  );\r\n}\r\n\r\nButtonPrimary.propTypes = {\r\n  onClick: PropTypes.func,\r\n  spacing: PropTypes.string,\r\n  title: PropTypes.string\r\n};\r\n\r\nButtonPrimary.defaultProps = {\r\n  title: 'Button',\r\n  spacing: 'small'\r\n};\r\n\r\nexport default ButtonPrimary;\r\n","export let API_URL;\r\n\r\n// checking if development or productions\r\nif (!process.env.NODE_ENV || process.env.NODE_ENV === \"development\") {\r\n  console.log('development');\r\n  // development\r\n  API_URL = 'http://localhost:8090/php-banking-api-test-gpcuaw/project/api';\r\n} else {\r\n  console.log('production');\r\n  // production\r\n  API_URL = 'https://php-banking-api.herokuapp.com/api';\r\n}\r\n\r\nexport async function transferMoney(amount, transferorId, transfereeId) {\r\n  const response = await fetch(`${API_URL}/transactions`, {\r\n    method: 'post',\r\n    body: JSON.stringify({\r\n      amount: amount,\r\n      transferorAccountId: transferorId,\r\n      transfereeAccountId: transfereeId\r\n    })\r\n  });\r\n  const json = await response.json();\r\n  return json;\r\n}\r\n\r\n\r\n","import PropTypes from 'prop-types';\r\n\r\nfunction ObjectDetail(props) {\r\n  return (\r\n    <p className=\"object-detail\">\r\n      <span className=\"bold\">{props.title}: </span>\r\n      <span>{props.value}</span>\r\n    </p>\r\n  )\r\n}\r\n\r\nObjectDetail.propTypes = {\r\n  title: PropTypes.string,\r\n  value: PropTypes.oneOfType([\r\n    PropTypes.string,\r\n    PropTypes.number\r\n  ])\r\n};\r\n\r\nexport default ObjectDetail;\r\n","import camelCase from \"lodash/camelCase\";\r\nimport startCase from \"lodash/startCase\";\r\nimport snakeCase from \"lodash/snakeCase\";\r\nimport kebabCase from \"lodash/kebabCase\";\r\nimport ObjectDetail from './components/ObjectDetail';\r\n\r\n// getObjectDetailsJSX\r\nexport const getObjectDetailsJSX = (object) => {\r\n  // const items = Object.keys(object).map(key => {\r\n  //   return <p className=\"object-detail\"><strong>{key}: </strong>{object[key]}</p>;\r\n  // });\r\n\r\n  const items = Object.keys(object).map((key, index) => {\r\n    return <ObjectDetail key={index} title={key} value={object[key]} />\r\n  });\r\n  return items;\r\n};\r\n\r\n/*\r\n  const object = {id: 1, name: 'jean'}\r\n  to\r\n  <strong>id:</strong>:1\r\n  <strong>name:</strong jean\r\n*/\r\nexport const getDOMStringFromObject = (object) => {\r\n  let alertDOMString = '';\r\n  for (const key in object) {\r\n    alertDOMString += `<strong>${key}: ${object[key]}</strong><br>`;\r\n  }\r\n  return alertDOMString;\r\n};\r\n\r\nexport const getColumnsFromData = (data) => {\r\n  if (data && data[0]) {\r\n    const firstRecord = data[0];\r\n    const keys = Object.keys(firstRecord);\r\n    let columns = {};\r\n    keys.forEach(key => {\r\n      columns[key] = key\r\n    });\r\n    return columns;\r\n  }\r\n\r\n  return {};\r\n}\r\n\r\nconst pascalCase = (string) => {\r\n  return startCase(camelCase(string)).replace(/ /g, '');\r\n}\r\n\r\n// FieldStringStyle\r\n// camelCase (customerId) \r\n// pascalCase (CustomerId)\r\n// snakeCase (customer_id)\r\n// kebabCase (customer-id)\r\n// generates a fields object from a list of records or a single recod\r\nexport const generateFieldsFromData = (data, fieldStringCase=\"camelCase\") => {\r\n  const fields = {\r\n  };\r\n\r\n  if (data) {\r\n    let firstRecord;\r\n\r\n    // determining if the data is an array of data or a single record\r\n    if (data[0]) {\r\n      firstRecord = data[0]\r\n    } else {\r\n      firstRecord = data;\r\n    }\r\n\r\n    for (const key in firstRecord) { \r\n      let fieldName = convertToCase(key, fieldStringCase);\r\n\r\n      fields[fieldName] = {\r\n        type: 'text',\r\n        disabled: false\r\n      }\r\n\r\n      // id should not be required\r\n      if (fieldName !== 'id') {\r\n        fields[fieldName]['isRequired'] = true;\r\n      }\r\n    }\r\n\r\n    return fields;\r\n  }\r\n};\r\n\r\n// generate a checkboxes object from an array of data\r\n/*\r\n  Sample Input:\r\n  keyPrefix = checkbox\r\n  defaultValues = false\r\n  data = [\r\n    {\r\n      id: 5,\r\n      name: 'jean'\r\n    },\r\n    {\r\n      id: 10,\r\n      name: 'pedro\r\n    }\r\n  ];\r\n\r\n  // sample output:\r\n    {\r\n      checkbox5: false,\r\n      checkbox10: false\r\n    }\r\n*/\r\nexport const generateCheckboxObject = (data, keyPrefix=\"\", defaultValues=false) => {\r\n  const checkboxObject = {};\r\n  data.forEach(record => {\r\n    checkboxObject[`${keyPrefix}${record.id}`] = defaultValues;\r\n  });\r\n\r\n  return checkboxObject;\r\n}\r\n\r\n// convert the object keys case\r\nexport const convertObjectKeysCase = (object, stringCase=\"camelCase\") => {\r\n  const newObject = {};\r\n  Object.keys(object).forEach(key => {\r\n    newObject[convertToCase(key, stringCase)] = object[key];\r\n  });\r\n\r\n  return newObject;\r\n}\r\n\r\n// transform the a string case\r\nexport function convertToCase(string, stringCase=\"camelCase\") {\r\n  let convertedString;\r\n  switch (stringCase) {\r\n    case 'camelCase':\r\n      convertedString = camelCase(string);\r\n      break;\r\n    case 'pascalCase':\r\n      convertedString = pascalCase(string);\r\n      break;\r\n    case 'snakeCase':\r\n      convertedString = snakeCase(string);\r\n      break;\r\n    case 'kebabCase':\r\n      convertedString = kebabCase(string);\r\n      break;\r\n    default: \r\n    convertedString = camelCase(string);\r\n    break;\r\n  }\r\n\r\n  return convertedString;\r\n}\r\n\r\nexport const slowAjaxRequestSingle = (timeout=5000) => {\r\n  return new Promise((resolve, reject) => {\r\n    setTimeout(() => {\r\n      resolve({\r\n        id: Math.random() * 10,\r\n        name: `tester name` ,\r\n        balance: `tester name ${Math.random() * 1000}`,\r\n        customerId: 1,\r\n        dateOpened: `10/20/2020`\r\n      });\r\n    }, timeout);\r\n  });\r\n};\r\n\r\nexport const slowAjaxRequestMultiple = (timeout=5000) => {\r\n  const data = {\r\n    data: [\r\n      {\r\n        id: 1,\r\n        name: 'jean' \r\n      },\r\n      {\r\n        id: 2,\r\n        name: 'Branded Gipson'\r\n      },\r\n      {\r\n        id: 3,\r\n        name: 'Georgina Hazel'\r\n      }\r\n    ]\r\n  };\r\n\r\n  return new Promise((resolve, reject) => {\r\n    setTimeout(() => {\r\n      resolve(data);\r\n    }, timeout)\r\n  })\r\n}\r\n\r\n// const convertHyphenCaseToPascalCase = (string) => {\r\n//   const hyphenSplit = string.split(\"_\");\r\n//   const result = hyphenSplit\r\n//     .map((string) => {\r\n//       const stringSplit = string.split(\"\");\r\n//       const firstCharMayus = stringSplit[0].toUpperCase();\r\n//       const sliced = stringSplit.slice(1, stringSplit.length).join(\"\");\r\n//       const upperCaseString = firstCharMayus + sliced;\r\n//       return upperCaseString;\r\n//     })\r\n//     .join(\"\");\r\n\r\n//   return result;\r\n// };\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Alert from './alert/Alert';\r\nimport ButtonPrimary from './button/ButtonPrimary';\r\nimport * as APIUtils from '../api/APIUtils';\r\nimport * as Utils from '../Utils';\r\n\r\nclass TransactionForm extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      amount: '',\r\n      transferorAccountId: '',\r\n      transfereeAccountId: '',\r\n      showAlert: true,\r\n      formAlert: {\r\n        show: false,\r\n        type: 'info',\r\n        content: []\r\n      }\r\n    };\r\n\r\n    // DOM element to use focus DOM method\r\n    this.initialInput = React.createRef();\r\n\r\n    this.handleInputChange = this.handleInputChange.bind(this);\r\n    this.handleClick = this.handleClick.bind(this);\r\n    this.handleAlertCloseClick = this.handleAlertCloseClick.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    // focus on initial input\r\n    this.focusInitialInput();\r\n  }\r\n\r\n  handleInputChange(e) {\r\n    const target = e.target;\r\n    this.setState({\r\n      [target.name]: target.value\r\n    })\r\n  }\r\n\r\n  handleAlertCloseClick() {\r\n    this.setState(state => {\r\n      return {\r\n        formAlert: {\r\n          show: !state.formAlert.show\r\n        }\r\n      };\r\n    })\r\n  }\r\n\r\n  async handleClick(e) {\r\n    e.preventDefault();\r\n\r\n    const formValidationErrors = this.validateForm();\r\n\r\n    if (Object.keys(formValidationErrors).length === 0) {\r\n      \r\n      const transactionResult = await this.transferMoney();\r\n\r\n      if (transactionResult.transactionStatus === \"successful\") {\r\n        const alertContent = [\r\n          <><strong>Successfull Transaction!</strong><br /><br /></>,\r\n          ...Utils.getObjectDetailsJSX(transactionResult.data)\r\n        ];\r\n        this.setState({\r\n          formAlert: {\r\n            show: true,\r\n            type: 'success',\r\n            content: alertContent\r\n          }\r\n        });\r\n\r\n        this.clearForm();\r\n      }\r\n\r\n      if (transactionResult.transactionStatus === \"failed\") {\r\n        this.showErrorAlert(transactionResult.message);\r\n      }\r\n    } else {\r\n      this.showErrorAlert(formValidationErrors);\r\n    }\r\n  }\r\n\r\n  async transferMoney() {\r\n    const amount = this.state.amount;\r\n    const transferorAccountId = this.state.transferorAccountId;\r\n    const transfereeAccountId = this.state.transfereeAccountId;\r\n\r\n    const response = await APIUtils.transferMoney(amount, transferorAccountId, transfereeAccountId);\r\n    return response;\r\n  }\r\n\r\n  validateForm() {\r\n    const amount = this.state.amount;\r\n    const transferorAccountId = this.state.transferorAccountId;\r\n    const transfereeAccountId = this.state.transfereeAccountId;\r\n    const errors = {};\r\n\r\n    if (!amount) {\r\n      errors.amount = \"Amount cannot be empty\";\r\n    } else if (isNaN(amount)) {\r\n      errors.amount =\"Amount should be a numeric value\";\r\n    } else if (Number(amount) <= 0) {\r\n      errors.amount = \"Amount cannot be 0 or a negative value\";\r\n    }\r\n\r\n    if (!transferorAccountId) {\r\n      errors.transferorAccountId = \"Transferor account number cannot be empty\";\r\n    }\r\n\r\n    if (!transfereeAccountId) {\r\n      errors.transfereeAccountId = \"Transferee account number cannot be empty\";\r\n    }\r\n\r\n    if ((transferorAccountId && transferorAccountId) && transferorAccountId === transfereeAccountId) {\r\n      errors.transferorAccountId = \"Transferor and Transferee accounts cannot be equal\";\r\n      errors.transfereeAccountId = \"Transferor and Transferee accounts cannot be equal\";\r\n    }\r\n\r\n    return errors;\r\n  }\r\n\r\n  clearForm() {\r\n    this.setState({\r\n      amount: '',\r\n      transferorAccountId: '',\r\n      transfereeAccountId: '',\r\n    });\r\n\r\n    this.focusInitialInput();\r\n  }\r\n\r\n  focusInitialInput() {\r\n    this.initialInput.current.focus();\r\n  }\r\n\r\n  showErrorAlert(errorsObject) {\r\n    const alertContent = Utils.getObjectDetailsJSX(errorsObject);\r\n\r\n    this.setState({\r\n      formAlert: {\r\n        show: true,\r\n        type: 'danger',\r\n        content: alertContent\r\n      }\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"section section--height-fullviewport\">\r\n        <h1 className=\"section-title\">Bank Transaction</h1>\r\n        <form className=\"form\">\r\n          <div className=\"form-group\">\r\n            <label>Amount</label>\r\n            <input \r\n              ref={this.initialInput}\r\n              className=\"form-input\" \r\n              type=\"number\" \r\n              name=\"amount\" \r\n              value={this.state.amount} \r\n              onChange={this.handleInputChange}\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label>Transferor Account</label>\r\n            <input \r\n              className=\"form-input\" \r\n              type=\"text\"\r\n              name=\"transferorAccountId\" \r\n              value={this.state.transferorAccountId} \r\n              onChange={this.handleInputChange} \r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label>Transferee Account</label>\r\n            <input \r\n              className=\"form-input\" \r\n              type=\"text\" \r\n              name=\"transfereeAccountId\" \r\n              value={this.state.transfereeAccountId} \r\n              onChange={this.handleInputChange} \r\n            />\r\n          </div>\r\n          <ButtonPrimary title=\"Transfer\" onClick={this.handleClick} />\r\n        </form>\r\n        <Alert type={this.state.formAlert.type} show={this.state.formAlert.show} onCloseClick={this.handleAlertCloseClick}>\r\n          {this.state.formAlert.content}\r\n        </Alert>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nTransactionForm.propTypes = {};\r\n\r\nexport default TransactionForm;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction ButtonBackground(props) {\r\n  return (\r\n    <button className={`button button--${props.type}-bg button--size-small`} onClick={props.onClick}></button>\r\n  );\r\n}\r\n\r\nButtonBackground.propTypes = {\r\n  onClick: PropTypes.func,\r\n  type: PropTypes.string\r\n};\r\n\r\nexport default ButtonBackground;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ButtonBackground from './button/ButtonBackground';\r\nimport ButtonPrimary from './button/ButtonPrimary';\r\n\r\nclass SearchForm extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.handleInputChange = this.handleInputChange.bind(this);\r\n    this.handleSearchClick = this.handleSearchClick.bind(this);\r\n  }\r\n\r\n  handleSearchClick(e) {\r\n    e.preventDefault();\r\n    this.props.onSearchClick();\r\n  }\r\n\r\n  handleInputChange(e) {\r\n    this.props.onInputChange(e.target.value);\r\n  }\r\n\r\n  render() {\r\n    // prop.buttonType = background || text\r\n    return (\r\n      <React.Fragment>\r\n        <form className=\"form\">\r\n          <div className=\"form-group\">\r\n            <label className=\"form-label\">{this.props.title}</label>\r\n            <input className=\"form-input\" type=\"text\" name=\"search-value\" value={this.props.value} onChange={this.handleInputChange} />\r\n            \r\n            {this.props.typeOfButton === 'background' && \r\n              <ButtonBackground type=\"search\" onClick={this.handleSearchClick} />}\r\n          </div>\r\n          \r\n          {this.props.typeOfButton === 'text' && \r\n            <ButtonPrimary title=\"Search\" onClick={this.handleSearchClick} />}\r\n        </form>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nSearchForm.propTypes = {\r\n  value: PropTypes.string,\r\n  onInputChange: PropTypes.func,\r\n  onSearchClick: PropTypes.func,\r\n  title: PropTypes.string,\r\n  typeOfButton: PropTypes.string,\r\n}\r\n\r\nSearchForm.defaultProps = {\r\n  typeOfButton: \"text\"\r\n};\r\n\r\nexport default SearchForm;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Modal extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.handleClick = this.handleClick.bind(this);\r\n  }\r\n\r\n  handleClick(e) {\r\n    this.props.onCloseClick();\r\n  }\r\n\r\n  render() {\r\n    if (this.props.show !== undefined && this.props.show === false) {\r\n      return null;\r\n    }\r\n\r\n    return (\r\n      <div className=\"modal\">\r\n        <div className=\"modal-content\">\r\n          <div className=\"modal-header\">\r\n            <span className=\"modal-close-button\" onClick={this.handleClick}>&times;</span>\r\n            <h2>{this.props.header}</h2>\r\n          </div>\r\n          <div className=\"modal-body\">\r\n            {this.props.children}\r\n            {/* in this case this is not needed because we are passing the jsx directly */}\r\n            {/* <span dangerouslySetInnerHTML={{__html: }} /> */}\r\n          </div>\r\n          <div className=\"modal-footer\">\r\n            <h3>{this.props.footer}</h3>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nModal.propTypes = {\r\n  children: PropTypes.node,\r\n  footer: PropTypes.string,\r\n  header: PropTypes.string,\r\n  onCloseClick: PropTypes.func,\r\n  show: PropTypes.bool\r\n};\r\n\r\nexport default Modal;\r\n","import \"./loader.css\";\r\nimport Proptypes from \"prop-types\";\r\n\r\nexport default function Loader(props) {\r\n  if (!props.show) {\r\n    return null;\r\n  }\r\n\r\n  let loader;\r\n\r\n  if (!props.customOptions) {\r\n    loader = <div className={`loader loader--color-${props.color}`} />;\r\n  } else {\r\n    const styles = {};\r\n\r\n    if (props.customOptions.base) {\r\n      styles[\"borderColor\"] = props.customOptions.base;\r\n    }\r\n\r\n    if (props.customOptions.border) {\r\n      styles[\"borderTopColor\"] = props.customOptions.border;\r\n    }\r\n\r\n    if (props.customOptions.width) {\r\n      styles[\"width\"] = props.customOptions.width;\r\n    }\r\n\r\n    if (props.customOptions.height) {\r\n      styles[\"height\"] = props.customOptions.height;\r\n    }\r\n\r\n    loader = <div className=\"loader\" style={styles} />;\r\n  }\r\n\r\n  return loader;\r\n}\r\n\r\nLoader.propTypes = {\r\n  color: Proptypes.string,\r\n  show: Proptypes.bool,\r\n  customOptions: Proptypes.shape({\r\n    base: Proptypes.string,\r\n    border: Proptypes.string,\r\n    width: Proptypes.number,\r\n    height: Proptypes.number\r\n  })\r\n};\r\n\r\nLoader.defaultProps = {\r\n  color: \"red\",\r\n  show: true\r\n};\r\n","import PropTypes from 'prop-types';\r\nimport ButtonBackground from '../button/ButtonBackground'\r\n\r\nfunction DatatableRow(props) {\r\n  return (\r\n    <tr data-id={props.id}>\r\n      {props.bulkDeleting && Object.keys(props.checkboxes).length > 0 &&\r\n        <td>\r\n          <input \r\n            type=\"checkbox\" \r\n            name={`${props.id}`} \r\n            checked={props.checkboxes[`${props.id}`]} \r\n            onChange={props.onCheckboxValueChange}\r\n          />\r\n        </td>\r\n      }\r\n      {/* {Object.keys(props.rowData).map(key => {\r\n        return <td key={key}>{props.rowData[key]}</td>\r\n      })} */}\r\n      {Object.keys(props.columns).map(column => {\r\n        if (column in props.rowData) {\r\n          return <td key={column}>{props.rowData[column]}</td>\r\n        }\r\n      })}\r\n      {props.actionButtons && \r\n        <td>\r\n          <ButtonBackground type=\"edit\" onClick={props.onEditActionButtonClick} />\r\n          <ButtonBackground type=\"delete\" onClick={props.onDeleteActionButtonClick} />\r\n          <ButtonBackground type=\"read\" onClick={props.onViewActionButtonClick} />\r\n        </td>\r\n      }\r\n    </tr>\r\n  );\r\n}\r\n\r\nDatatableRow.propTypes = {\r\n  id: PropTypes.number,\r\n  rowData: PropTypes.object,\r\n  columns: PropTypes.object,\r\n  checkboxes: PropTypes.object,\r\n  onCheckboxValueChange: PropTypes.func,\r\n  bulkDeleting: PropTypes.bool,\r\n  actionButtons: PropTypes.bool,\r\n  onEditActionButtonClick: PropTypes.func,\r\n  onViewActionButtonClick: PropTypes.func,\r\n  onDeleteActionButtonClick: PropTypes.func\r\n};\r\n\r\nexport default DatatableRow;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ButtonBackground from '../button/ButtonBackground';\r\nimport DatatableRow from './DatatableRow';\r\nimport * as Utils from '../../Utils';\r\n\r\nclass Datatable extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // columns for datatable, it is not on state because this will not change over the time \r\n    // sample\r\n    // const columns = {\r\n    //   customerId: \"Customer Identification\",\r\n    //   id: \"Identifier\",\r\n    //   name: \"shortName\"\r\n    // };\r\n    // this.columns = {};\r\n  }\r\n\r\n  // componentDidMount() {\r\n  //   if (this.props.columns) {\r\n  //     this.columns = this.props.columns;\r\n  //   } else {\r\n  //     // props.rows is empty because as a result of the initial render of the crud component\r\n  //     console.log(this.props);\r\n  //     //this.columns = this.getColumnsFromData(this.props.rows);\r\n  //   }\r\n\r\n  //   console.log(this.columns);\r\n  // }\r\n\r\n  render() {\r\n    // sample column prop:\r\n    //  {\r\n    //   customer_id: \"Customer Identification\",\r\n    //   id: \"Identifier\",\r\n    //   name: \"shortName\"\r\n    // };\r\n\r\n    // columns prop format\r\n    // {\r\n    //   data_fielname: custom_column_title_in_datatable\r\n    // }\r\n\r\n    // a custom column prop allow us to:\r\n    //   - Set which columns should appear and which not (black list and white list columns)\r\n    //   - Specify the order of columns in the Datatable\r\n    //   - Mapping a field to a custom title\r\n\r\n    // if a custom column prop is not specified this component generates\r\n    // the columns automatically using the method getColumnsFromData\r\n\r\n    // avoiding perfomance issues\r\n    if (!this.columns) {\r\n      if (this.props.columns) {\r\n        this.columns = this.props.columns;\r\n      } else {\r\n        // props.rows is empty because as a result of the initial render of the crud component\r\n        this.columns = Utils.getColumnsFromData(this.props.rows);\r\n      }\r\n    }\r\n  \r\n    return (\r\n      <div className=\"table-container\">\r\n        <table className={`datatable datatable--${this.props.theme}-theme`}>\r\n          <thead>\r\n            <tr>\r\n              {this.props.bulkDeleting && <th></th>}\r\n              {Object.keys(this.columns).map((column, index) => {\r\n                return <th key={index}>{this.columns[column]}</th>\r\n              })}\r\n              {/* {this.props.columns.map(column => {\r\n                return <th>{column}</th>\r\n              })}\r\n               */}\r\n              {this.props.actionButtons && <th>Actions</th>}\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {this.props.rows.map(row => {\r\n              return (\r\n                <DatatableRow \r\n                  key={row.id}\r\n                  id={row.id} \r\n                  rowData={row} \r\n                  columns={this.columns}\r\n                  checkboxes={this.props.checkboxes}\r\n                  onCheckboxValueChange={this.props.onCheckboxValueChange}\r\n                  bulkDeleting={this.props.bulkDeleting} \r\n                  actionButtons={this.props.actionButtons}\r\n                  onEditActionButtonClick={this.props.onEditActionButtonClick}\r\n                  onDeleteActionButtonClick={this.props.onDeleteActionButtonClick}\r\n                  onViewActionButtonClick={this.props.onViewActionButtonClick}\r\n                  // onDeleteActionButtonClick={this.props.onDeleteActionButtonClick}\r\n                />\r\n              );\r\n            })}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nDatatable.propTypes = {\r\n  theme: PropTypes.string,\r\n  columns: PropTypes.object, // optional, if not provided it is generated automatically\r\n  rows: PropTypes.array,\r\n  checkboxes: PropTypes.object, // only required if bulk deleting is enabled\r\n  onCheckboxValueChange: PropTypes.func, // only required if bulk deleting is enabled\r\n  bulkDeleting: PropTypes.bool,\r\n  actionButtons: PropTypes.bool,\r\n  onEditActionButtonClick: PropTypes.func, // only needed if actionButtons is true\r\n  onViewActionButtonClick: PropTypes.func, // only needed if actionButtons is true\r\n  onDeleteActionButtonClick: PropTypes.func // only needed if actionButtons is true\r\n}\r\n\r\nDatatable.defaultProps = {\r\n  bulkDeleting: true,\r\n  checkboxes: {},\r\n  actionButtons: true,\r\n  theme: 'red'\r\n};\r\n\r\nexport default Datatable;\r\n","import PropTypes from 'prop-types';\r\n\r\nfunction ButtonContainer(props) {\r\n  return (\r\n    <div className=\"button-container\">\r\n      {props.children}\r\n    </div>\r\n  );\r\n}\r\n\r\nButtonContainer.propTypes = {\r\n  children: PropTypes.node\r\n};\r\n\r\nexport default ButtonContainer;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Modal from '../modal/Modal';\r\nimport Alert from '../alert/Alert';\r\nimport ButtonPrimary from '../button/ButtonPrimary';\r\nimport * as Utils from '../../Utils';\r\n\r\n// Dynamic formFields form from Array\r\nclass CUFormModal extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      form: {},\r\n      formAlert: {\r\n        show: false,\r\n        type: 'info',\r\n        content: []\r\n      }\r\n    };\r\n\r\n    this.handleSaveClick = this.handleSaveClick.bind(this);\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleAlertCloseClick = this.handleAlertCloseClick.bind(this);\r\n    this.handleCloseModalClick = this.handleCloseModalClick.bind(this);\r\n  }\r\n\r\n  async componentDidMount() {\r\n    // set the initial values to empty\r\n    let form = {};\r\n\r\n    // if the form is create, initialize the fields as empty\r\n    if (this.props.action === 'create') {\r\n      Object.keys(this.props.formFields).forEach(fieldName => {\r\n        form[fieldName] = '';\r\n      });\r\n      this.setState({\r\n        form: form\r\n      });\r\n    } \r\n  \r\n    // do not do this\r\n    // this.props.formFields.forEach(field => {\r\n    //   this.setState({\r\n    //     form: {\r\n    //       [field]: ''\r\n    //     }\r\n    //   });\r\n    // });\r\n\r\n    // this.setState({\r\n    //   [field]: ''\r\n    // });\r\n  }\r\n\r\n  // getRecord() {\r\n  //   return new Promise((resolve, reject) => {\r\n  //     setTimeout(() => {\r\n  //       resolve({\r\n  //         id: Math.random() * 10,\r\n  //         name: `tester name ${Math.random() * 10}` ,\r\n  //         balance: `tester name ${Math.random() * 10}`,\r\n  //         customerId: 1,\r\n  //         dateOpened: `tester name ${Math.random() * 10}`\r\n  //       });\r\n  //     }, 5000);\r\n  //   });\r\n  // }\r\n\r\n  // previous approach to fill the form with the record, network request logic in lifecycle\r\n  // the problem with this was that we were showing the modal before getting the data\r\n  // async componentDidUpdate(prevProps, prevState, snapshot) {\r\n  //   if (this.props.action === 'update') {\r\n  //     // Only do a network request if the selected record is not the same\r\n  //     // if the selected record is the same there is not need to make a network request again\r\n  //     if (prevProps.selectedRecordId != this.props.selectedRecordId) {\r\n  //       console.log('component did update');\r\n  //       let record = await this.getRecord();\r\n  //       // converting record keys string case\r\n  //       record = Utils.convertObjectKeysCase(record, 'camelCase');\r\n  //       const form = {};\r\n        \r\n  //       // fill the form with the record info\r\n  //       for (const key in record) {\r\n  //         form[key] = record[key];\r\n  //       }\r\n        \r\n  //       // updating state for filling form\r\n  //       this.setState({\r\n  //         form: form\r\n  //       });\r\n  //     }\r\n  //   }\r\n  // }\r\n\r\n  async componentDidUpdate(prevProps, prevState, snapshot) {\r\n    // only if the action is update\r\n    if (this.props.action === 'update') {\r\n      // we should only update state if the selected record is different from the previous selected\r\n      if (prevProps.selectedRecord.id !== this.props.selectedRecord.id) {\r\n        this.fillFormStateFromRecord(this.props.selectedRecord);\r\n      }\r\n    }\r\n  }\r\n  \r\n  // fill state form property from a record\r\n  fillFormStateFromRecord(record) {\r\n    record = Utils.convertObjectKeysCase(record, 'camelcase');\r\n    const form = {};\r\n\r\n    // fill the form with the record info\r\n    for (const key in record) {\r\n      form[key] = record[key];\r\n    }\r\n    \r\n    // updating state for filling form\r\n    this.setState({\r\n      form: form\r\n    });\r\n  }\r\n\r\n  async handleSaveClick(e) {\r\n    e.preventDefault();\r\n\r\n    const formValidationErrors = this.validateForm();\r\n\r\n    if (Object.keys(formValidationErrors).length === 0) {\r\n      if (this.props.action === 'create') {\r\n        this.create(formValidationErrors);\r\n      }\r\n\r\n      if (this.props.action === 'update') {\r\n        this.update(formValidationErrors);\r\n      }\r\n    } else {\r\n      this.showErrorAlert(formValidationErrors);\r\n    }\r\n  }\r\n\r\n  showErrorAlert(errorsObject) {\r\n    const alertContent = Utils.getObjectDetailsJSX(errorsObject);\r\n    this.setState({\r\n      formAlert: {\r\n        show: true,\r\n        type: 'danger',\r\n        content: alertContent\r\n      }\r\n    });\r\n  }\r\n\r\n  handleChange(e) {\r\n    this.setState(previousState => {\r\n      return {\r\n        form: {\r\n          ...previousState.form,\r\n          [e.target.name]: e.target.value\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  async create(formValidationErrors) {\r\n    const response = await this.props.create(this.state.form);\r\n\r\n    if (!response.error) {\r\n      // fill the datatable\r\n      this.props.resetDatatable();\r\n\r\n      const alertContent = [\r\n        <><strong><p>Record Added Succesfully!</p></strong><br/></>,\r\n        ...Utils.getObjectDetailsJSX(response)\r\n      ];\r\n      \r\n      this.clearForm();\r\n\r\n      this.setState({\r\n        formAlert: {\r\n          show: true,\r\n          type: 'success',\r\n          content: alertContent\r\n        }\r\n      })\r\n\r\n      // remove alert notification after a few seconds:\r\n      this.closeAlert(5000);\r\n    } else {\r\n      this.showErrorAlert(response);\r\n    }\r\n  } \r\n\r\n  async update(formValidationErrors) {\r\n    const response = await this.props.update(this.state.form);\r\n\r\n    if (!response.error) {\r\n      this.props.resetDatatable();\r\n\r\n      const alertContent = [\r\n        <><strong><p>Record Updated Successfully</p></strong><br /></>,\r\n        ...Utils.getObjectDetailsJSX(response)\r\n      ];\r\n\r\n      this.setState({\r\n        formAlert: {\r\n          show: true,\r\n          type: 'success',\r\n          content: alertContent\r\n        }\r\n      });\r\n\r\n      this.closeAlert(5000);\r\n    } else {\r\n      this.showErrorAlert(response);\r\n    }\r\n  }\r\n\r\n  clearForm() {\r\n    // clean every form field\r\n    const form = {};\r\n    for (const key in this.state.form) {\r\n      form[key] = '';\r\n    }\r\n\r\n    this.setState({\r\n      form: form\r\n    });\r\n  }\r\n  \r\n  validateForm() {\r\n    const inputs = this.state.form;\r\n    const errors = {};\r\n\r\n    for (const key in inputs) {\r\n      if (this.props.formFields[key].isRequired) {\r\n        if (!inputs[key]) {\r\n          errors[key] = `${key} cannot be empty`;\r\n        }\r\n      }\r\n    }\r\n    \r\n    return errors;\r\n  }\r\n\r\n  closeAlert(timeout) {\r\n    if (!timeout) {\r\n      this.setState({\r\n        formAlert: {\r\n          show: false\r\n        }\r\n      });\r\n    } else {\r\n      setTimeout(() => {\r\n        this.setState({\r\n          formAlert: {\r\n            show: false\r\n          }\r\n        });\r\n      }, timeout);\r\n    }\r\n  }\r\n\r\n  handleAlertCloseClick() {\r\n    this.closeAlert();\r\n  }\r\n\r\n  handleCloseModalClick() {\r\n    // call custom component code on modal close click before call parent method\r\n    // close alert before Closing Modal\r\n    this.closeAlert();\r\n\r\n    // call props close function\r\n    this.props.onCloseClick();\r\n  }\r\n  \r\n  render() {\r\n    const formFields = this.props.formFields;\r\n    let modalHeader = '';\r\n\r\n    if (this.props.action === 'create') {\r\n      modalHeader = `Create ${this.props.entityName} Record`;\r\n    } else if (this.props.action === 'update') {\r\n      modalHeader = `Update ${this.props.entityName} Record`;\r\n    }\r\n\r\n    return (\r\n      <Modal header={modalHeader} show={this.props.show} onCloseClick={this.handleCloseModalClick}>\r\n        <form className=\"form\">\r\n          {Object.keys(formFields).map((field, index) => {\r\n            // if the form is create, hide id field\r\n            let disableField = formFields[field].disabled;\r\n\r\n            if (this.props.action === 'create' && field === 'id') {\r\n              return;\r\n            }\r\n\r\n            // if the form is update show id field as disabled   \r\n            if (this.props.action === 'update' && field === 'id') {\r\n              disableField = true;\r\n            }\r\n\r\n            return (\r\n              <div className=\"form-group\" key={index}> \r\n                <label>{field}</label>\r\n                {/*\r\n                To avoid rendering undefined at the first render(component did mount is executed after the first render)\r\n                we need to do a short circuit validation to avoid rendering undefined */\r\n                }\r\n                \r\n                <input \r\n                  name={field} \r\n                  type={formFields[field].type} \r\n                  className=\"form-input\" \r\n                  value={this.state.form[field] || ''} \r\n                  onChange={this.handleChange} \r\n                  disabled={disableField} />\r\n              </div>\r\n            );\r\n          })}\r\n        </form>\r\n\r\n        <Alert type={this.state.formAlert.type} show={this.state.formAlert.show} onCloseClick={this.handleAlertCloseClick}>\r\n          {this.state.formAlert.content}\r\n        </Alert>\r\n        <ButtonPrimary title=\"Save\" onClick={this.handleSaveClick} />\r\n      </Modal>\r\n    );\r\n  }\r\n}\r\n\r\nCUFormModal.propTypes = {\r\n  // formFields = {\r\n  //   name: {\r\n  //     type: text,\r\n  //     enable: true\r\n  //   },\r\n\r\n  //   lastName: {\r\n  //     type: text,\r\n  //     enable: true\r\n  //   }\r\n  //   age: {\r\n  //     type: text,\r\n  //     enable: true\r\n  //   }\r\n  //   status: {\r\n  //     type: combo,\r\n  //     enable: false\r\n  //   }\r\n  action: PropTypes.string,      // can be create or update\r\n  entityName: PropTypes.string,\r\n  formFields: PropTypes.object,  // array of formFields objects\r\n  show: PropTypes.bool,\r\n  create: PropTypes.func,     // can be a create or update(add, edit) function\r\n  findById: PropTypes.func,\r\n  fillDatatable: PropTypes.func, // fill the crud datatable function.\r\n  resetDatatable: PropTypes.func, // reset crud datatable function\r\n  onCloseClick: PropTypes.func,\r\n  selectedRecord: PropTypes.object,  // only for update modal,\r\n};\r\n\r\nCUFormModal.defaultProps  = {\r\n  action: 'create',\r\n  pagination: true\r\n}\r\n\r\nexport default CUFormModal;\r\n","import PropTypes from 'prop-types';\r\n\r\nfunction Card(props) {\r\n  return (\r\n    <div className=\"card\">\r\n      {props.children}\r\n    </div>\r\n  );\r\n}\r\n\r\nCard.propTypes = {\r\n  children: PropTypes.node\r\n};\r\n\r\nexport default Card;\r\n","import PropTypes from 'prop-types';\r\nimport Card from './card/Card';\r\nimport * as Utils from '../Utils';\r\n\r\nfunction RecordCard(props) {\r\n  const objectDetailsJSX = Utils.getObjectDetailsJSX(props.record);\r\n  \r\n  return (\r\n    <Card>\r\n      {objectDetailsJSX}\r\n    </Card>\r\n  );\r\n}\r\n\r\nRecordCard.propTypes = {\r\n  record: PropTypes.object\r\n};\r\n\r\nexport default RecordCard;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Modal from '../modal/Modal';\r\nimport RecordCard from '../RecordCard';\r\n\r\nclass ViewRecordModal extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.handleCloseModalClick = this.handleCloseModalClick.bind(this);\r\n  } \r\n\r\n  handleCloseModalClick() {\r\n    this.props.onCloseClick();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Modal header=\"View Record Modal\" onCloseClick={this.handleCloseModalClick}>\r\n        <div className=\"view-record\">\r\n          <RecordCard record={this.props.record} />\r\n        </div>\r\n      </Modal>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nViewRecordModal.propTypes = {\r\n  record: PropTypes.object\r\n};\r\n\r\nexport default ViewRecordModal;\r\n","import Loader from \"./Loader\";\r\nimport Proptypes from \"prop-types\";\r\n\r\nfunction FullScreenLoader(props) {\r\n  if (!props.show) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <div className=\"full-screen-black-overlay\">\r\n      <div className=\"full-screen-modal-container\">\r\n        <Loader color={props.color} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nFullScreenLoader.propTypes = {\r\n  show: Proptypes.bool\r\n};\r\n\r\nFullScreenLoader.defaultProps = {\r\n  color: \"red\",\r\n  show: true\r\n};\r\n\r\nexport default FullScreenLoader;\r\n","import Proptypes from 'prop-types';\r\n\r\nfunction NotResultsFound(props) {\r\n  return (\r\n    <p className=\"no-results-paragraph\">{props.message}</p>\r\n  );\r\n}\r\n\r\nNotResultsFound.propTypes = {\r\n  message: Proptypes.string\r\n};\r\n\r\nNotResultsFound.defaultProps = {\r\n  message: \"No results have been found.\"\r\n}\r\n\r\nexport default NotResultsFound;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Pagination extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.handlePreviousClick = this.handlePreviousClick.bind(this);\r\n    this.handleNextClick = this.handleNextClick.bind(this);\r\n    this.handlePageNumberClick = this.handlePageNumberClick.bind(this);\r\n  } \r\n\r\n  handlePreviousClick(e) {\r\n    e.preventDefault();\r\n    this.props.onPreviousClick(e);\r\n  }\r\n\r\n  handlePageNumberClick(e) {\r\n    e.preventDefault();\r\n    const pageClicked = parseInt(e.target.parentNode.dataset.page);\r\n    this.props.onPageNumberClick(pageClicked);\r\n  }\r\n\r\n  handleNextClick(e) {\r\n    e.preventDefault();\r\n    this.props.onNextClick(e);\r\n  }\r\n\r\n  render() {\r\n    const liElements = [];\r\n    let element;\r\n    // ES6 array.from or ...Array(this.props.totalPages) can be used too\r\n    for (let i = 1; i <= this.props.totalPages; i++) {\r\n      // refactor this to use classnames package\r\n      element = <li key={i} data-page={i} className=\"page-item\">\r\n                    <a className={`page-link ${this.props.activePage === i ? 'page-link--active' : ''} `} href=\"#\" onClick={this.handlePageNumberClick}>\r\n                      {i}\r\n                    </a>\r\n                </li>;\r\n      liElements.push(element);\r\n\r\n    }\r\n\r\n    return (\r\n      <nav className=\"pagination-container\">\r\n        <ul className=\"pagination\">\r\n\r\n          <li className=\"page-item\">\r\n            <a className={`page-link ${!this.props.isPreviousEnabled ? 'page-link--disabled': ''} `} href=\"#\" onClick={this.handlePreviousClick}>\r\n              Previous\r\n            </a>\r\n          </li>\r\n          {liElements}\r\n          {/* \r\n          <li class=\"page-item\"><a className=\"page-link\" href=\"#\">1</a></li>\r\n          <li class=\"page-item\"><a className=\"page-link\" href=\"#\">2</a></li>\r\n          <li class=\"page-item\"><a className=\"page-link\" href=\"#\">3</a></li> */}\r\n          <li className=\"page-item\">\r\n            <a className={`page-link ${!this.props.isNextEnabled ? 'page-link--disabled' : ''} `} href=\"#\" onClick={this.handleNextClick}>Next</a>\r\n          </li>\r\n        </ul>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n\r\nPagination.propTypes = {\r\n  totalPages: PropTypes.number,\r\n  activePage: PropTypes.number,\r\n  isPreviousEnabled: PropTypes.bool,\r\n  isNextEnabled: PropTypes.bool,\r\n  onPreviousClick: PropTypes.func,\r\n  onNextClick: PropTypes.func,\r\n  onPageNumberClick: PropTypes.func\r\n};\r\n\r\nexport default Pagination;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Datatable from './Datatable';\r\nimport SearchForm from '../SearchForm';\r\nimport ButtonContainer from '../button/ButtonContainer';\r\nimport ButtonPrimary from '../button/ButtonPrimary';\r\nimport CUFormModal from './CURecordModal';\r\nimport ViewRecordModal from './ViewRecordModal';\r\nimport FullScreenLoader from '../loader/FullScreenLoader';\r\nimport Loader from '../loader/Loader';\r\nimport NotResultsFound from '../NotResultsFound';\r\nimport Pagination from '../pagination/Pagination';\r\nimport * as Utils from '../../Utils';\r\n// import * as AccountApi from '../../api/AccountApi';\r\n\r\nclass Crud extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      searchText: '',\r\n      // fully controlled form checkboxes\r\n      checkboxes: {},\r\n      data: [],\r\n      isDataLoaded: false,\r\n      showCreateRecordModal: false,\r\n      showUpdateRecordModal: false,\r\n      showViewRecordModal: false,\r\n      showFullScreenLoader: false,\r\n      selectedRecord: {},\r\n      pagination: {\r\n        page: 1,\r\n        isPreviousEnabled: false,\r\n        isNextEnabled: true,\r\n        totalPages: 1\r\n      }\r\n    };\r\n\r\n    this.handleSearchValueChange = this.handleSearchValueChange.bind(this);\r\n    this.handleCheckboxValueChange = this.handleCheckboxValueChange.bind(this);\r\n    this.handleSearchClick = this.handleSearchClick.bind(this);\r\n    this.handleAddRecordModalClick = this.handleAddRecordModalClick.bind(this);\r\n    this.handleEditActionButtonClick = this.handleEditActionButtonClick.bind(this);\r\n    this.handleViewActionButtonClick = this.handleViewActionButtonClick.bind(this);\r\n    this.handleDeleteActionButtonClick = this.handleDeleteActionButtonClick.bind(this);\r\n    this.handleBulkDeletingButton = this.handleBulkDeletingButton.bind(this);\r\n    this.handleCloseModalClick = this.handleCloseModalClick.bind(this);\r\n    this.handlePaginationPreviousClick = this.handlePaginationPreviousClick.bind(this);\r\n    this.handlePaginationNumberClick = this.handlePaginationNumberClick.bind(this);\r\n    this.handlePaginationNextClick = this.handlePaginationNextClick.bind(this);\r\n    this.fillDatatable = this.fillDatatable.bind(this);\r\n    this.resetDatatable = this.resetDatatable.bind(this);\r\n  }\r\n\r\n  async componentDidMount() {\r\n    this.resetDatatable();\r\n  }\r\n\r\n  // lifesaver method\r\n  // refill datatable and go to the first page if the pagination is enabled\r\n  // if pagination is not enabled, just fill the datatable\r\n  resetDatatable() {\r\n    if (this.props.pagination) {\r\n      this.setPageOnPagination(1);\r\n    } else {\r\n      this.fillDatatable();\r\n    }\r\n  }\r\n\r\n  // refactor this in the future? nehh....\r\n  // fill the datatable, if not parameters is set get all the records\r\n  // if search text parameter is set, filter the data \r\n  // if page paramer is set, fill the datatable with pagination at the specified page\r\n  async fillDatatable(searchText=null, page=null) {\r\n    let data;\r\n    let stateObject = {};\r\n\r\n    this.setState({\r\n      isDataLoaded: false\r\n    });\r\n\r\n    // if search text exists the method is called from the searchForm, else is called for the main CRUD component\r\n    if (!searchText) {\r\n      // if page parameter is enabled, make a pagination result else get all the records\r\n      if (page) {\r\n        data = await this.props.read(page, this.props.perPage);\r\n        \r\n        // setting the total pages in state\r\n        stateObject.pagination = {\r\n          ...this.state.pagination,\r\n          totalPages: data.total_pages\r\n        }\r\n      } else {\r\n        data = await this.props.read();\r\n      }\r\n    } else {\r\n      data = await this.props.search(searchText);\r\n    }\r\n\r\n    if (data.data) {\r\n      data = data.data;\r\n    } else {\r\n      data = [];\r\n    }\r\n\r\n    stateObject.data = data;\r\n    stateObject.isDataLoaded = true;\r\n\r\n    // if bulk deleting is enabled create checkboxes\r\n    if (this.props.bulkDeleting) {\r\n      const checkboxesObject = Utils.generateCheckboxObject(data);\r\n      stateObject['checkboxes'] = checkboxesObject;\r\n    } \r\n\r\n    this.setState(stateObject);\r\n  }\r\n\r\n  handleSearchValueChange(searchValue) {\r\n    this.setState({\r\n      searchText: searchValue\r\n    });\r\n  }\r\n\r\n  handleCheckboxValueChange(e) {\r\n    const target = e.target;\r\n    const name = e.target.name;\r\n    \r\n    if (target.type === 'checkbox') {\r\n      const value = target.checked;\r\n      // shallow copy the state object\r\n      let checkboxesCopy = { ...this.state.checkboxes };\r\n\r\n      // do not do this because we are assigning the point to the state object\r\n      // let checkboxesCopy = this.state.checkboxes ;\r\n      checkboxesCopy[name] = value;\r\n      this.setState({\r\n        checkboxes: checkboxesCopy\r\n      });\r\n    }\r\n  }\r\n\r\n  async handleSearchClick() {\r\n    // if search text is empty, go to the first page\r\n    const searchText = this.state.searchText;\r\n    if (searchText) {\r\n      this.fillDatatable(this.state.searchText);\r\n    } else {\r\n      this.resetDatatable();\r\n    }\r\n  }\r\n\r\n  handleAddRecordModalClick() {\r\n    this.setState({\r\n      showCreateRecordModal: true\r\n    });\r\n  }\r\n\r\n  async handleEditActionButtonClick(e) {\r\n    // id of the clicked element\r\n    const id = this.getSelectedRecordId(e);\r\n\r\n    // show full screen loader\r\n    this.showFullScreenLoader();\r\n\r\n    const record = await this.props.findById(id);\r\n    // TODO loading modal for slow ajax request\r\n    // const record = await Utils.slowAjaxRequestSingle();\r\n\r\n    // hide loader\r\n    this.hideFullScreenLoader();\r\n    // showing modal after getting data\r\n    this.setState({\r\n      selectedRecord: record,\r\n      showUpdateRecordModal: true,\r\n    });\r\n  }\r\n\r\n  async handleViewActionButtonClick(e) {\r\n    const id = this.getSelectedRecordId(e);\r\n    \r\n    this.showFullScreenLoader();\r\n\r\n    const record = await this.props.findById(id);\r\n\r\n    this.hideFullScreenLoader();\r\n\r\n    this.setState({\r\n      selectedRecord: record,\r\n      showViewRecordModal: true\r\n    });\r\n  }\r\n\r\n  async handleDeleteActionButtonClick(e) {\r\n    const id = this.getSelectedRecordId(e);\r\n\r\n    const userConfirmation = window.confirm(`Are you sure you want to delete this ${this.props.entityName} with id: ${id}?`);\r\n\r\n    if (userConfirmation) {\r\n      const deleteStatusCode = await this.props.delete(id);\r\n\r\n      if (deleteStatusCode === 204) {\r\n        this.resetDatatable();\r\n        // this message can be a little annoying, let's notify only when there is an error\r\n        // alert(`${this.props.entityName} with id: ${id} deleted succesfully`);\r\n      }\r\n\r\n      if (deleteStatusCode === 404) {\r\n        alert(`Failed to delete ${this.props.entityName} with id: ${id}, 404 Record not found`);\r\n      }\r\n    }\r\n  }\r\n\r\n  async handleBulkDeletingButton() {\r\n    const checkedIds = this.getCheckedRecordsIds();\r\n\r\n    if (checkedIds.length > 0) {\r\n      const userConfirmation = window.confirm(`Are you sure you want to delete the selected records:?\\n[${checkedIds.join(\", \")}]`);\r\n      if (userConfirmation) {\r\n        this.showFullScreenLoader();\r\n        const responses = await this.props.bulkDelete(checkedIds);\r\n        this.hideFullScreenLoader();\r\n        this.resetDatatable();\r\n      }\r\n    } else {\r\n      alert(\"Please select the records to be deleted\");\r\n    }\r\n  }\r\n\r\n  handleCloseModalClick(modalName) {\r\n    if (modalName === 'addModal') {\r\n      this.setState({\r\n        showCreateRecordModal: false\r\n      })\r\n    }\r\n\r\n    if (modalName === 'editModal') {\r\n      this.setState({\r\n        showUpdateRecordModal: false\r\n      });\r\n    }\r\n\r\n    if (modalName === 'viewModal') {\r\n      this.setState({\r\n        showViewRecordModal: false\r\n      });\r\n    }\r\n  }\r\n\r\n  handlePaginationPreviousClick(e) {\r\n    this.previousPage();\r\n  }\r\n\r\n  handlePaginationNextClick(e) {\r\n    this.nextPage();\r\n  }\r\n  \r\n  handlePaginationNumberClick(page) {\r\n    this.setPageOnPagination(page);\r\n  }\r\n\r\n  getCheckedRecordsIds() {\r\n    const checkedIds = Object.keys(this.state.checkboxes).filter(key => {\r\n      if (this.state.checkboxes[key]) {\r\n        return key;\r\n      }\r\n    });\r\n\r\n    return checkedIds;\r\n  }\r\n  \r\n  getSelectedRecordId(e) {\r\n    const id = e.target.closest('tr').dataset.id;\r\n    return id;\r\n  }\r\n\r\n  showFullScreenLoader() {\r\n    this.setState({\r\n      showFullScreenLoader: true\r\n    });\r\n  }\r\n\r\n  hideFullScreenLoader() {\r\n    this.setState({\r\n      showFullScreenLoader: false\r\n    })\r\n  }\r\n\r\n  previousPage() {\r\n    let page = this.state.pagination.page;\r\n\r\n    if (page > 1) {\r\n      page--;\r\n    }\r\n\r\n    this.setPageOnPagination(page);\r\n  }\r\n\r\n  nextPage() {\r\n    let page = this.state.pagination.page;\r\n    const totalPages = this.state.pagination.totalPages;\r\n\r\n    if (page < totalPages) {\r\n      page++;\r\n    }\r\n\r\n    this.setPageOnPagination(page);\r\n  }\r\n\r\n  // set the actual page on the state and fill the datatable with the specified page\r\n  setPageOnPagination(page) {\r\n    let isPreviousEnabled;\r\n    let isNextEnabled;\r\n    \r\n    // check if previous should be enabled\r\n    if (page === 1) {\r\n      isPreviousEnabled = false\r\n    } else {\r\n      isPreviousEnabled = true;\r\n    }\r\n\r\n    // check if next should be enabled\r\n    if (page === this.state.pagination.totalPages) {\r\n      isNextEnabled = false;\r\n    } else {\r\n      isNextEnabled = true;\r\n    }\r\n\r\n    // fill datatable with page\r\n    this.fillDatatable(null,  page);\r\n\r\n    this.setState({\r\n      pagination: {\r\n          ...this.state.pagination,\r\n        page: page,\r\n        isPreviousEnabled: isPreviousEnabled,\r\n        isNextEnabled: isNextEnabled\r\n      }\r\n    });\r\n  }\r\n\r\n  render() {\r\n    // const columns = ['id', 'name'];\r\n    // const rows = [\r\n    //   {\r\n    //     id: 1,\r\n    //     name: 'jean'\r\n    //   },\r\n    //   {\r\n    //     id: 2,\r\n    //     name: 'pedro'\r\n    //   }\r\n    // ];\r\n\r\n    // making sure the children elements get the data on first render\r\n    // do not render children until the data is fullfilled after initial render (componentDidMount)\r\n    // if (!this.state.data) {\r\n    //   return null;\r\n    // }\r\n\r\n    let formFields = {};\r\n\r\n    // formFields = customFormFields or generate fields from the database columns\r\n    if (this.props.formFields) {\r\n      formFields = this.props.formFields;\r\n    } else {\r\n      if (this.state.data) {\r\n        formFields = Utils.generateFieldsFromData(this.state.data, 'camelCase');\r\n      }\r\n    }\r\n\r\n    // if (this.state.data) {\r\n    //   formFields = this.props.formFields ? this.props.formFields : Utils.generateFieldsFromData(this.state.data, 'camelCase');\r\n    // }\r\n\r\n    return (\r\n      <div className=\"section\" id={`${this.props.entityName}`}>\r\n        <h2 className=\"section-title\">{Utils.convertToCase(this.props.entityName, 'pascalCase')} CRUD</h2>\r\n        <CUFormModal\r\n          action=\"create\"\r\n          entityName={this.props.entityName}\r\n          create={this.props.create}\r\n          show={this.state.showCreateRecordModal} \r\n          // fields={Object.keys(Utils.getColumnsFromData(this.state.data))} \r\n          // if the form fields is speficated use those, if not generate it automatically\r\n          formFields={formFields} \r\n          fillDatatable={this.fillDatatable}\r\n          onCloseClick={this.handleCloseModalClick.bind(this, 'addModal')} \r\n          resetDatatable={this.resetDatatable}\r\n        />\r\n        \r\n        <CUFormModal\r\n          action=\"update\"\r\n          entityName={this.props.entityName}\r\n          update={this.props.update}\r\n          findById={this.props.findById}\r\n          selectedRecord={this.state.selectedRecord}\r\n          formFields={formFields}\r\n          show={this.state.showUpdateRecordModal}\r\n          fillDatatable={this.fillDatatable}\r\n          onCloseClick={this.handleCloseModalClick.bind(this, 'editModal')}\r\n          resetDatatable={this.resetDatatable}\r\n        />\r\n        {this.state.showViewRecordModal && \r\n          <ViewRecordModal \r\n            record={this.state.selectedRecord} \r\n            onCloseClick={this.handleCloseModalClick.bind(this, 'viewModal')}\r\n          />\r\n        }\r\n        <SearchForm \r\n          title=\"Search: \" \r\n          value={this.state.searchText} \r\n          onInputChange={this.handleSearchValueChange} \r\n          onSearchClick={this.handleSearchClick}\r\n          typeOfButton=\"background\" />\r\n        <ButtonContainer>\r\n          <ButtonPrimary title=\"Add Record\" spacing='none' onClick={this.handleAddRecordModalClick} />\r\n          \r\n          {this.props.bulkDeleting && \r\n            <ButtonPrimary title=\"Bulk Delete\" spacing='none' onClick={this.handleBulkDeletingButton} /> \r\n          }\r\n        </ButtonContainer>\r\n\r\n        {!this.state.isDataLoaded &&\r\n          <div className='loader-container'>\r\n            <Loader />\r\n          </div>\r\n        }\r\n\r\n        {this.state.isDataLoaded && this.state.data.length > 0 &&\r\n          <Datatable \r\n            theme=\"red\" \r\n            columns={this.props.columns} \r\n            rows={this.state.data} \r\n            checkboxes={this.state.checkboxes}\r\n            onCheckboxValueChange={this.handleCheckboxValueChange}\r\n            bulkDeleting={this.props.bulkDeleting}\r\n            actionButtons={this.props.actionButtons} \r\n            onEditActionButtonClick={this.handleEditActionButtonClick}\r\n            onViewActionButtonClick={this.handleViewActionButtonClick}\r\n            onDeleteActionButtonClick={this.handleDeleteActionButtonClick}\r\n          />      \r\n        }\r\n\r\n        {this.state.isDataLoaded && !this.state.data.length &&\r\n          <NotResultsFound />\r\n        }\r\n        <FullScreenLoader show={this.state.showFullScreenLoader} />\r\n\r\n        {this.props.pagination &&\r\n          <Pagination\r\n            totalPages={this.state.pagination.totalPages} \r\n            activePage={this.state.pagination.page} \r\n            isPreviousEnabled={this.state.pagination.isPreviousEnabled}\r\n            isNextEnabled={this.state.pagination.isNextEnabled}\r\n            onPreviousClick={this.handlePaginationPreviousClick}\r\n            onNextClick={this.handlePaginationNextClick}\r\n            onPageNumberClick={this.handlePaginationNumberClick}\r\n          />\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nCrud.propTypes = {\r\n  // title: PropTypes.string,\r\n  entityName: PropTypes.string.isRequired,\r\n  columns: PropTypes.object,\r\n  formFields: PropTypes.object,\r\n  create: PropTypes.func,\r\n  update: PropTypes.func,\r\n  read: PropTypes.func,\r\n  findById: PropTypes.func,\r\n  delete: PropTypes.func,\r\n  bulkDelete: PropTypes.func, // only required if bulk deleting is enabled\r\n  search: PropTypes.func.isRequired,\r\n  actionButtons: PropTypes.bool,\r\n  bulkDeleting: PropTypes.bool,\r\n  pagination: PropTypes.bool,\r\n  perPage: PropTypes.number\r\n};\r\n\r\nCrud.defaultProps = {\r\n  actionButtons: true,\r\n  bulkDeleting: true,\r\n  pagination: true,\r\n  perPage: 10\r\n};\r\n\r\nexport default Crud;                                                \r\n","import { API_URL } from './APIUtils';\r\n\r\nexport async function read(page=null, perPage=null) {\r\n  let response;\r\n\r\n  // if page is enabled, make a paginated request\r\n  let url = `${API_URL}\\\\customers`;\r\n\r\n  if (page) {\r\n    url = `${url}?page=${page}`;\r\n\r\n    if (perPage) {\r\n      url = `${url}&per_page=${perPage}`;\r\n    }\r\n  } \r\n\r\n  response = await fetch(url);\r\n  const json = await response.json();\r\n\r\n  return json;\r\n}\r\n\r\nexport async function findById(id) {\r\n  const response = await fetch(`${API_URL}/customers/${id}`);\r\n  const json = await response.json();\r\n  return json;\r\n}\r\n\r\nexport async function search(value) {\r\n  const response = await fetch(`${API_URL}\\\\customers?name=${value}`);\r\n  const json = await response.json();\r\n  return json;\r\n}\r\n\r\n// using objects instead of variables parameters because the order matters\r\n// \r\n// data = {\r\n//   name: <name>\r\n// }\r\nexport const create = async (data) => {\r\n  const response = await fetch(`${API_URL}\\\\customers`, {\r\n    method: 'POST',\r\n    body: JSON.stringify({\r\n      name: data.name\r\n    })\r\n  });\r\n\r\n  const json = await response.json();\r\n  return json;\r\n};\r\n\r\n// data = {\r\n//   id:  <id_to_update>\r\n//   name: <name>\r\n// }\r\nexport const update = async (data) => {\r\n  const response = await fetch(`${API_URL}\\\\customers\\\\${data.id}`, {\r\n    method: 'PUT',\r\n    body: JSON.stringify({\r\n      name: data.name\r\n    })\r\n  });\r\n\r\n  const json = await response.json();\r\n  return json;\r\n};\r\n\r\n// delete is a reserved word so it cannot be used as a variable name\r\n// 204 if succesful, 404 if the record was not found\r\nexport const remove = async (id) => {\r\n  const response = await fetch(`${API_URL}\\\\customers\\\\${id}`, {\r\n    method: \"delete\"\r\n  });\r\n\r\n  return response.status;\r\n};\r\n\r\nexport const bulkDelete = async (ids) => {\r\n  const promises = ids.map((id) => {\r\n    // returning promises to be used in promise all\r\n    return remove(id);\r\n  });\r\n\r\n  const responses = await Promise.all(promises);\r\n\r\n  return responses;\r\n};\r\n","import { API_URL } from './APIUtils';\r\n\r\nexport const read = async (page=null, perPage=null) => {\r\n  let response;\r\n  let url = `${API_URL}/accounts`;\r\n\r\n  if (page) {\r\n    url = `${url}?page=${page}`;\r\n    if (perPage) {\r\n      url = `${url}&per_page=${perPage}`;\r\n    }\r\n  } \r\n  \r\n  response = await fetch(url);\r\n  const json = await response.json();\r\n  return json;\r\n}\r\n\r\nexport async function findById(id) {\r\n  const response = await fetch(`${API_URL}/accounts/${id}`);\r\n  const json = await response.json();\r\n  return json;\r\n}\r\n\r\nexport const search = async (name) => {\r\n  const response = await fetch(`${API_URL}/accounts?name=${name}`);\r\n  const json = await response.json();\r\n  return json;\r\n}\r\n\r\nexport async function findByCustomerId(id) {\r\n  const response = await fetch(`${API_URL}/customers/${id}/accounts`);\r\n  const json = await response.json();\r\n  return json;\r\n}\r\n\r\n// data = {\r\n//   name: <name>,\r\n//   balance: <balance>\r\n//   customerId: <customerId>\r\n// }\r\nexport const create = async (data) => {\r\n  const response = await fetch(`${API_URL}/accounts`, {\r\n    method: 'POST',\r\n    body: JSON.stringify({\r\n      name: data.name,\r\n      balance: data.balance,\r\n      customerId: data.customerId\r\n    })\r\n  });\r\n\r\n  const json = await response.json();\r\n  return json;\r\n};\r\n\r\n// data = {\r\n//   id: <id_to_update>\r\n//   name: <name>,\r\n//   balance: <balance>\r\n//   customerId: <customerId>\r\n// }\r\nexport const update = async (data) => {\r\n  const response = await fetch(`${API_URL}/accounts/${data.id}`, {\r\n    method: 'PUT',\r\n    body: JSON.stringify({\r\n      name: data.name,\r\n      balance: data.balance,\r\n      customerId: data.customerId\r\n    })\r\n  });\r\n  \r\n  const json = await response.json();\r\n  return json;\r\n};\r\n\r\nexport const remove = async (id) => {\r\n  const response = await fetch(`${API_URL}\\\\accounts\\\\${id}`, {\r\n    method: \"delete\"\r\n  });\r\n\r\n  return response.status;\r\n};\r\n\r\n\r\nexport const bulkDelete = async (ids) => {\r\n  const promises = ids.map((id) => {\r\n    // returning promises to be used in promise all\r\n    return remove(id);\r\n  });\r\n\r\n  const responses = await Promise.all(promises);\r\n\r\n  return responses;\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport RecordCard from './RecordCard';\r\nimport SearchForm from './SearchForm';\r\nimport Loader from './loader/Loader';  \r\nimport NotResultsFound from './NotResultsFound';\r\n\r\nimport * as Utils from '../Utils';\r\n\r\nclass RecordDetails extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      searchValue: '',\r\n      record: {},\r\n      loading: false,\r\n      isLoaded: false\r\n    }\r\n    this.handleSearchClick = this.handleSearchClick.bind(this);\r\n    this.handleSearchValueChange = this.handleSearchValueChange.bind(this);\r\n  }\r\n\r\n  handleSearchClick(e) {\r\n    const id = this.state.searchValue;\r\n    if (!id) {\r\n      alert(`${this.props.entityName} id cannot be empty`);\r\n      return ;\r\n    }\r\n    this.showRecordDetails(id);\r\n  }\r\n\r\n  handleSearchValueChange(searchValue) {\r\n    this.setState({\r\n      searchValue: searchValue\r\n    });\r\n  }\r\n\r\n  async showRecordDetails(id) {\r\n    this.setState({\r\n      loading: true,\r\n      isLoaded: false\r\n    });\r\n\r\n    const record = await this.props.findById(id);\r\n    \r\n    if (record && !record.error) {\r\n      this.setState({\r\n        record: record\r\n      });\r\n    } else {\r\n      this.setState({\r\n        record: {}\r\n      })\r\n    }\r\n\r\n    this.setState({\r\n      loading: false,\r\n      isLoaded: true\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"section section--height-fullviewport\">\r\n        <h2 className=\"section-title\">{this.props.entityName} Details</h2>\r\n        <SearchForm \r\n          title={`${this.props.entityName} id: `} \r\n          value={this.state.searchValue} \r\n          onInputChange={this.handleSearchValueChange} \r\n          onSearchClick={this.handleSearchClick} />\r\n\r\n        {this.state.loading &&\r\n          <div className='loader-container'>\r\n            <Loader />\r\n          </div>\r\n        }\r\n        \r\n        {this.state.isLoaded && Object.keys(this.state.record).length > 0 &&\r\n          <RecordCard record={this.state.record}/>\r\n        }\r\n\r\n        {this.state.isLoaded && Object.keys(this.state.record).length === 0 &&\r\n          <NotResultsFound />\r\n        } \r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nRecordDetails.propTypes = {\r\n  entityName: PropTypes.string,\r\n  findById: PropTypes.func\r\n};\r\n\r\n\r\nexport default RecordDetails;\r\n","import TransactionForm from './TransactionForm';\r\nimport Alert from './alert/Alert'\r\nimport SearchForm from './SearchForm';\r\nimport Modal from './modal/Modal';\r\nimport ButtonPrimary from './button/ButtonPrimary';\r\nimport ButtonBackground from './button/ButtonBackground';\r\nimport Loader from './loader/Loader';\r\nimport Crud from './crud/Crud';\r\nimport * as CustomerApi from '../api/CustomerApi';\r\nimport * as AccountApi from '../api/AccountApi';\r\nimport RecordCard from './RecordCard';\r\nimport RecordDetails from './RecordDetails';\r\nimport FullScreenLoader from './loader/FullScreenLoader';\r\nimport Pagination from './pagination/Pagination'\r\n\r\nfunction App() {\r\n  // const accountsData = [\r\n  //   {\r\n  //     number: \"1020202\",\r\n  //     name: \"Tester Account\",\r\n  //     balance: 5000,\r\n  //     customerId: 1,\r\n  //     dateOpened: \"2021-03-20\"\r\n  //   },\r\n  //   {\r\n  //     number: \"2020203\",\r\n  //     name: \"Tester Account 2\",\r\n  //     balance: 10000,\r\n  //     customerId: 2,\r\n  //     dateOpened: \"2021-04-21\"\r\n  //   }\r\n  // ];\r\n\r\n  // const customerData = {\r\n  //   id: 1,\r\n  //   name: 'Jean Urena'\r\n  // };\r\n\r\n  const accountsColumnMap = {\r\n    customer_id: 'Customer Identification',\r\n    id: 'Identification',\r\n    name: 'Short Name'\r\n  };\r\n\r\n  const customerFormFields = {\r\n    // id: {\r\n    //   type: 'text',\r\n    //   disabled: true\r\n    // },\r\n    name: {\r\n      type: 'text',\r\n      disabled: false,\r\n      isRequired: true\r\n    }\r\n  };\r\n  \r\n  const accountFormFields = {\r\n    name: {\r\n      type: 'text',\r\n      disabled: false,\r\n      isRequired: true\r\n    },\r\n    balance: {\r\n      type: 'text',\r\n      disabled: false,\r\n      isRequired: true\r\n    },\r\n    customerId: {\r\n      type: 'text',\r\n      disabled: false,\r\n      isRequired: true\r\n    },\r\n  };\r\n\r\n  // const customersColumnMap = {\r\n  //   name: 'full name',\r\n  //   id: 'identification'\r\n  // };\r\n\r\n  return (\r\n    <div className=\"app container\">\r\n      {/* <Pagination totalPages={5} /> */}\r\n      <TransactionForm />\r\n      <RecordDetails entityName=\"Accounts\" findById={AccountApi.findById} />\r\n      <RecordDetails entityName=\"Customers\" findById={CustomerApi.findById} />\r\n\r\n      {/* <Modal header=\"Customer Crud\" onCloseClick={() => console.log('Hello There')}>\r\n        <div>\r\n          <p>Hola Mundo</p>\r\n          <p>Hola Mundo</p>\r\n        </div>     \r\n      </Modal> */}\r\n      {/* <ButtonBackground type=\"edit\" onClick={() => console.log('Hello World')} /> */}\r\n      {/* not using custom columns mapping, buttons enabled */}\r\n      <Crud \r\n        // title=\"Customer Crud\"\r\n        entityName=\"customer\"\r\n        // formFields={customerFormFields}\r\n        create={CustomerApi.create}\r\n        update={CustomerApi.update}\r\n        read={CustomerApi.read}\r\n        findById={CustomerApi.findById}\r\n        search={CustomerApi.search} \r\n        delete={CustomerApi.remove}\r\n        bulkDelete={CustomerApi.bulkDelete}\r\n        actionButtons={true}\r\n        bulkDeleting={true}\r\n        pagination={true}\r\n        perPage={5}\r\n      />\r\n\r\n      {/* using customColumns Map, extra buttons disabled */}\r\n      <Crud \r\n        // title=\"Account Crud\"\r\n        entityName=\"account\"\r\n        columns={accountsColumnMap}\r\n        // formFields={accountFormFields}\r\n        create={AccountApi.create}\r\n        update={AccountApi.update}\r\n        read={AccountApi.read}\r\n        findById={AccountApi.findById}\r\n        search={AccountApi.search}\r\n        delete={AccountApi.remove}\r\n        // actionButtons={false}\r\n        bulkDeleting={false}\r\n        pagination={false}\r\n        // perPage={8}\r\n        // search={CustomerApi.search} \r\n        />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './components/card/card.css';\nimport './components/alert/alert.css';\nimport './components/modal/modal.css';\nimport './components/crud/datatable.css';\nimport './components/pagination/pagination.css'\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}